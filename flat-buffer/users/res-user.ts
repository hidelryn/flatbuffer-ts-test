// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Gender } from '../../flat-buffer/users/gender';
import { Phone } from '../../flat-buffer/users/phone';


export class ResUser {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ResUser {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResUser(bb:flatbuffers.ByteBuffer, obj?:ResUser):ResUser {
  return (obj || new ResUser()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResUser(bb:flatbuffers.ByteBuffer, obj?:ResUser):ResUser {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResUser()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

createAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

gender():Gender {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Gender.male;
}

phone(obj?:Phone):Phone|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Phone()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startResUser(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt32(0, id, 0);
}

static addCreateAt(builder:flatbuffers.Builder, createAt:bigint) {
  builder.addFieldInt64(1, createAt, BigInt('0'));
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, nameOffset, 0);
}

static addGender(builder:flatbuffers.Builder, gender:Gender) {
  builder.addFieldInt8(3, gender, Gender.male);
}

static addPhone(builder:flatbuffers.Builder, phoneOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, phoneOffset, 0);
}

static endResUser(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
